using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Launcher
{
    public class Aetheryte : Actor
    {       
        public uint PrivilegeLevel { get; set; }   
        public uint TeleportMenuPageId { get; set; }
        public uint TeleportMenuId { get; set; }
        public uint AnimaCost { get; set; }
        private float PushEventRadius { get; set; }
        private AetheryteType AetheryteType { get; set; }
                
        public Aetheryte(uint classId, AetheryteType type, Position position, uint menuPageId = 0, uint menuId = 0, uint body = 1024)
        {
            ClassId = classId;
            Appearance.Size = 0x02;
            Position = position;
            AetheryteType = type;
            TeleportMenuPageId = menuPageId;
            TeleportMenuId = menuId;
            AnimaCost = 2; //calculated by distance from current location?
            Appearance = new Appearance { Body = body }; 

            switch (AetheryteType)
            {
                case AetheryteType.Crystal:
                    NameId = 4010014;
                    ClassName = "AetheryteParent";
                    ClassPath = "/Chara/Npc/Object/Aetheryte/";                    
                    ClassCode = 0x26000000;
                    PushEventRadius = 10.0f;
                    break;
                case AetheryteType.Gate:
                    NameId = 4010015;
                    ClassName = "AetheryteChild";
                    ClassPath = "/Chara/Npc/Object/Aetheryte/";                    
                    ClassCode = 0x26000000;
                    PushEventRadius = 3.0f;
                    break;
                case AetheryteType.Shard:
                    ClassName = "PopulaceStandard";
                    ClassPath = "/Chara/Npc/Populace/";
                    ClassId = 0x001250A0;
                    ClassCode = 0x33800000;
                    break;
            }            
        }

        public override void Prepare(ushort actorIndex)
        {
            float pushEventRadius = 3.0f;
            Zone zone = World.Instance.Zones.Find(x => x.Id == Position.ZoneId);
            EventConditions = new List<EventCondition>();

            Appearance.BaseModel = (uint)AetheryteType;

            if (AetheryteType != AetheryteType.Shard)
            {
                EventConditions.Add(new EventCondition { Opcode = ServerOpcode.TalkEvent, EventName = "talkDefault", Priority = 0x04 });
                EventConditions.Add(new EventCondition { Opcode = ServerOpcode.NoticeEvent, EventName = "pushCommand", Priority = 0x04 });
                //push event
                EventConditions.Add(new EventCondition { Opcode = ServerOpcode.PushEventCircle, EventName = "pushCommandIn", ServerCodes = 0x44c00014, Radius = pushEventRadius, Direction = 0x01, IsSilent = 0x00 });
                EventConditions.Add(new EventCondition { Opcode = ServerOpcode.PushEventCircle, EventName = "pushCommandOut", ServerCodes = 0x44c00014, Radius = pushEventRadius, Direction = 0x11, IsSilent = 0x00 });
            }

            EventConditions.Add(new EventCondition{ Opcode = ServerOpcode.NoticeEvent, EventName = "noticeEvent", IsDisabled = 0x01 });
            
            base.Prepare(actorIndex);     
        }

        public override void Init(Socket handler)
        {
            byte[] data =
            {
                0x20, 0x01, 0xA8, 0x0C, 0x4B, 0xE1, 0x01, 0x01, 0x71, 0xFD, 0x38, 0x21, 0x01, 0x02, 0x58, 0x5B,
                0xCF, 0x03, 0x12, 0x27, 0x01, 0x04, 0x53, 0xE2, 0x40, 0x08, 0x88, 0x2F, 0x5F, 0x69, 0x6E, 0x69,
                0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            if(AetheryteType == AetheryteType.Shard)
            {
                data = new byte[]
                {
                    0x0D, 0x01, 0xA8, 0x0C, 0x4B, 0xE1, 0x01, 0x88, 0x2F, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00




                };
            }





            SendPacket(handler, ServerOpcode.ActorInit, data);
        }

    }

   

}
