using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;

namespace Launcher
{   
    public class Packet
    {
        #region Properties
        public byte IsAuthenticated { get; private set; } = 0x01; //0x00: isAuthenticated;
        public byte IsEncoded { get; private set; } = 0x00; //0x01: isCompressed/encoded;
        public ushort ConnType { get; private set; } //0x02: connectionType;
        public ushort Size { get; private set; } = 0x10; //0x04: packetSize;
        public ushort NumSubpackets { get; private set; } //0x06: numSubpackets;
        public uint TimeStamp { get; private set; } //0x08: timestamp; //Miliseconds
        public byte[] Data { get; set; }       
        public Queue<SubPacket> SubPacketQueue { get; set; } = new Queue<SubPacket>();
        public List<SubPacket> SubPacketList { get; set; } = new List<SubPacket>();
        #endregion

        #region Static fields
        private static readonly Log _log = Log.Instance;
        #endregion

        #region Constructors
        public Packet(byte[] incoming) => PacketSetup(incoming);
        public Packet() { }
        public Packet(GamePacket gamePacket)
        {
            SubPacket subPacket= new SubPacket(gamePacket);            
            AddSubPacket(subPacket);
        }

        #endregion

        public void AddSubPacket(SubPacket subPacket)
        {
            Size += subPacket.Size;
            SubPacketList.Add(subPacket);
        }

        public byte[] Build(ref Blowfish blowfish)
        {
            byte[] toBytes = new byte[Size];

            byte[] header = new byte[0x10];            
            header[0x00] = IsAuthenticated;
            header[0x01] = IsEncoded;
            Buffer.BlockCopy(BitConverter.GetBytes(Size), 0, header, 0x04, 0x02);
            header[0x06] = (byte)SubPacketList.Count;
            Buffer.BlockCopy(Server.GetTimeStampHex(), 0, header, 0x08, 0x04);   

            int index = 0x10;
            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);

            foreach (SubPacket sp in SubPacketList)
            {
                Buffer.BlockCopy(sp.ToBytes(ref blowfish), 0, toBytes, index, sp.Size);
                index += sp.Size;
            }

            return toBytes;
        }

        public byte[] Build()
        {
            byte[] toBytes = new byte[Size];

            byte[] header = new byte[0x10];
            header[0x00] = IsAuthenticated;
            header[0x01] = IsEncoded;
            Buffer.BlockCopy(BitConverter.GetBytes(Size), 0, header, 0x04, 0x02);
            header[0x06] = (byte)SubPacketList.Count;
            Buffer.BlockCopy(Server.GetTimeStampHex(), 0, header, 0x08, 0x04);

            int index = 0x10;
            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);

            foreach (SubPacket sp in SubPacketList)
            {
                Buffer.BlockCopy(sp.ToBytes(), 0, toBytes, index, sp.Size);
                index += sp.Size;
            }

            return toBytes;
        }

        #region Dummy packets
        public static byte[] GameUpdatePacket { get; } = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32,
            0x30, 0x34, 0x20, 0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x44,
            0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63,
            0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x33, 0x20, 0x47,
            0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
            0x68, 0x65, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20, 0x28, 0x55, 0x6e, 0x69, 0x78, 0x29,
            0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x73, 0x6c, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20,
            0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x2f, 0x30, 0x2e, 0x39, 0x2e, 0x37, 0x64, 0x20, 0x50,
            0x48, 0x50, 0x2f, 0x35, 0x2e, 0x32, 0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
            0x74, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69,
            0x76, 0x2f, 0x34, 0x38, 0x65, 0x63, 0x61, 0x36, 0x34, 0x37, 0x2f, 0x76, 0x65, 0x72, 0x63, 0x68,
            0x65, 0x63, 0x6b, 0x2e, 0x64, 0x61, 0x74, 0x0d, 0x0a, 0x58, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69, 0x76, 0x2f, 0x77, 0x69, 0x6e,
            0x33, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x0d,
            0x0a, 0x58, 0x2d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a,
            0x20, 0x5a, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x0d, 0x0a, 0x58, 0x2d, 0x50, 0x72, 0x6f, 0x74,
            0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x20, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x58,
            0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
            0x6d, 0x2f, 0x0d, 0x0a, 0x58, 0x2d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x56, 0x65, 0x72,
            0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2e, 0x30, 0x37, 0x2e, 0x31, 0x30,
            0x2e, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c,
            0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41,
            0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c,
            0x20, 0x6d, 0x61, 0x78, 0x3d, 0x39, 0x39, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
            0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d,
            0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74,
            0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a
        };
        public static byte[] BootUpdatePacket { get; } = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32,
            0x30, 0x34, 0x20, 0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x44,
            0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63,
            0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x32, 0x20, 0x47,
            0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
            0x68, 0x65, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20, 0x28, 0x55, 0x6e, 0x69, 0x78, 0x29,
            0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x73, 0x6c, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20,
            0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x2f, 0x30, 0x2e, 0x39, 0x2e, 0x37, 0x64, 0x20, 0x50,
            0x48, 0x50, 0x2f, 0x35, 0x2e, 0x32, 0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
            0x74, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69,
            0x76, 0x2f, 0x32, 0x64, 0x32, 0x61, 0x33, 0x39, 0x30, 0x66, 0x2f, 0x76, 0x65, 0x72, 0x63, 0x68,
            0x65, 0x63, 0x6b, 0x2e, 0x64, 0x61, 0x74, 0x0d, 0x0a, 0x58, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69, 0x76, 0x2f, 0x77, 0x69, 0x6e,
            0x33, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x0d,
            0x0a, 0x58, 0x2d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a,
            0x20, 0x5a, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x0d, 0x0a, 0x58, 0x2d, 0x50, 0x72, 0x6f, 0x74,
            0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x20, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x58,
            0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
            0x6d, 0x2f, 0x0d, 0x0a, 0x58, 0x2d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x56, 0x65, 0x72,
            0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2e, 0x30, 0x37, 0x2e, 0x31, 0x30,
            0x2e, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c,
            0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41,
            0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c,
            0x20, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
            0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
            0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
            0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a
        };
        public static byte[] ErrorPage { get; set; } =
        {
            //HTTP 1.1 200 OK\r\n
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a,
            //Date: Mon, 31 Dec 2012 01:18:55 GMT\r\n
            0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x35, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a,
            //Server: Apache\r\n
            0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x0d, 0x0a,
            //Last-Modified: Thu, 20 Dec 2012 11:08:21 GMT\r\n
            0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x20, 0x54, 0x68, 0x75, 0x2c, 0x20, 0x32, 0x30, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x31, 0x3a, 0x30, 0x38, 0x3a, 0x32, 0x31, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a,
            //ETag: "14ce19-da-bfb3f340"\r\n
            0x45, 0x54, 0x61, 0x67, 0x3a, 0x20, 0x22, 0x31, 0x34, 0x63, 0x65, 0x31, 0x39, 0x2d, 0x64, 0x61, 0x2d, 0x62, 0x66, 0x62, 0x33, 0x66, 0x33, 0x34, 0x30, 0x22, 0x0d, 0x0a,
            //Accept-Ranges: bytes\r\n
            0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x0d, 0x0a,
            //Content-Length: 218\r\n {tamanho do html}
            0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20,
            0x31, 0x34, 0x35,
            0x0d, 0x0a,
            //Keep-Alive: timeout=5, max=99\r\n
            0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3d, 0x39, 0x39, 0x0d, 0x0a,
            //Connection: Keep-Alive\r\n
            0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a,
            //Content-Type: text\r\n
            0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x0d, 0x0a,
            //\r\n
            0x0d, 0x0a,

            //HTML
            0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x74, 0x69, 0x74,
            0x6C, 0x65, 0x3E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65,
            0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x68,
            0x31, 0x3E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x3C, 0x2F, 0x68, 0x31, 0x3E, 0x3C, 0x68, 0x34,
            0x3E, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20,
            0x66, 0x6F, 0x75, 0x6E, 0x64, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x20, 0x72,
            0x65, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x20, 0x53, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x68,
            0x20, 0x41, 0x73, 0x74, 0x72, 0x61, 0x6C, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x3C,
            0x68, 0x34, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C,
            0x3E
        };

        public static byte[] AckPacket { get; } =
        {
            0x00, 0x00, 0x00, 0x00, 0xA0, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x90, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x69, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xED, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xED, 0xDF, 0xFF, 0xAF, 0xF7, 0xF7, 0xAF, 0x10, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x42, 0x82, 0x63, 0x52, 0x01, 0x00, 0x00, 0x00, 0x10, 0xEF, 0xDF, 0xFF, 0x53, 0x61, 0x6D, 0x70,
            0x6C, 0x65, 0x20, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x52, 0x75, 0x6E, 0x52, 0x75, 0x6E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0xF7, 0xAF, 0xAF, 0xF7, 0x00, 0x00, 0xB8, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2C, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x4F, 0x62,
            0x6A, 0x65, 0x63, 0x74, 0x2E, 0x2E, 0x2E, 0x5B, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39,
            0x39, 0x2E, 0x38, 0x32, 0x3A, 0x36, 0x33, 0x34, 0x30, 0x37, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x70, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x6C, 0x4E, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x32, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xAF, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xFE, 0x4E, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x20, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x00, 0x01, 0xCC, 0xCC, 0x0C, 0x69, 0x00, 0xE0, 0xD0, 0x58, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x80, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0xC0, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xD0, 0xED, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xF0, 0xEE, 0xDF, 0xFF, 0xAF, 0xF7, 0xF7, 0xAF, 0x20, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x0C, 0x69, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x34, 0x30, 0x37, 0x00, 0x00, 0x00, 0x00,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x18, 0xBE, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xD8, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0xF7, 0xAF, 0x42, 0x82, 0x63, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39, 0x39, 0x2E, 0x38, 0x32, 0x00, 0x00,
            0x00, 0x00, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39, 0x39, 0x2E, 0x38, 0x32, 0x00, 0xFF,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x24, 0xCF, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7A, 0xB7, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xD1, 0xF3, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xE8, 0x3E, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x70, 0x99, 0xAA, 0x01, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x58, 0x59, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xE0, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x05, 0x3F, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x69, 0x00, 0xE0, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xF0, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x23, 0x3F, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0x5A, 0x33, 0x02, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
        };

        public static byte[] LoginAckPacket =
        {
           0x01, 0x00, 0x00, 0x00,
            0xb0, 0x02, 0x01, 0x00, 0x59, 0x4c, 0xcb, 0x32, 0x67, 0x01, 0x00, 0x00, 0xa0, 0x02, 0x03, 0x00,
            0x68, 0x68, 0x00, 0xe0, 0x68, 0x68, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x56, 0x7a, 0x0e, 0x5f,
            0xd0, 0xe6, 0x0e, 0xb2, 0x86, 0x3b, 0xff, 0x5f, 0x23, 0x92, 0x87, 0x69, 0x07, 0x1c, 0xcf, 0xe3,
            0x37, 0x59, 0xcc, 0x43, 0xc7, 0x87, 0x12, 0xf1, 0x8d, 0x9f, 0x95, 0x55, 0x07, 0x1c, 0xcf, 0xe3,
            0x37, 0x59, 0xcc, 0x43, 0x11, 0xd3, 0x3c, 0x50, 0x6a, 0x7d, 0x6a, 0x56, 0x87, 0x6e, 0xee, 0xed,
            0xf1, 0x11, 0x97, 0x49, 0x26, 0x17, 0x86, 0x45, 0x95, 0xe8, 0x58, 0x4d, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02,
            0x42, 0xad, 0xdb, 0x54, 0x0e, 0xd3, 0x44, 0x02, 0x42, 0xad, 0xdb, 0x54
        };
       
        public static byte[] PackPage(string page)
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();  

            newVer.AddHeader("HTTP/1.1 200 OK\r\n");
            newVer.AddHeader("Date: Mon, 31 Dec 2012 01:18:55 GMT\r\n");
            newVer.AddHeader("Server: Apache\r\n");
            newVer.AddHeader("Last-Modified: Thu, 20 Dec 2012 11:08:21 GMT\r\n");
            newVer.AddHeader("ETag: \"14ce19-da-bfb3f340\"\r\n");
            newVer.AddHeader("Accept-Ranges: bytes\r\n");
            newVer.AddHeader("Content-Length: "+ page.Length + "\r\n");
            newVer.AddHeader("Content-Type: text\r\n");
            newVer.AddHeader("\r\n");
            newVer.AddHeader(page);

            return newVer.ToByteStream();
        }

        public static byte[] UpToDate()
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();
            newVer.AddHeader("HTTP/1.1 204 No Content\r\n");
            newVer.AddHeader("Content-Location: ffxiv/2d2a390f/vercheck.dat\r\n");
            newVer.AddHeader("X-Repository: ffxiv/win32/release/boot\r\n");
            newVer.AddHeader("X-Patch-Module: ZiPatch\r\n");
            newVer.AddHeader("X-Protocol: torrent\r\n");
            newVer.AddHeader("X-Info-Url: http://example.com\r\n");
            newVer.AddHeader("X-Latest-Version: 2010.09.18.0000\r\n");           
            newVer.AddHeader("\r\n");
            return newVer.ToByteStream();
        }

        public static byte[] BootVer()
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();
            newVer.AddHeader("HTTP/1.1 200 OK\r\n");
            newVer.AddHeader("Content-Location: ffxiv/48eca647/vercheck.dat\r\n");
            newVer.AddHeader("Content-Type: multipart/mixed; boundary=477D80B1_38BC_41d4_8B48_5273ADB89CAC\r\n");
            newVer.AddHeader("X-Repository: ffxiv/win32/release/boot\r\n");
            newVer.AddHeader("X-Patch-Module: ZiPatch\r\n");
            newVer.AddHeader("X-Protocol: torrent\r\n");
            newVer.AddHeader("X-Info-Url: http://example.com\r\n");
            newVer.AddHeader("X-Latest-Version: 2012.05.20.0000.0001\r\n");
            newVer.AddHeader("Connection: keep-alive\r\n");
            return newVer.ToByteStream();
        }
        #endregion

        #region Get packet text
        public static string ToText(NetworkStream ns)
        {
            //convert received 
            byte[] data = new byte[1024];
            int receivedDataLength = ns.Read(data, 0, data.Length);
            return Encoding.ASCII.GetString(data, 0, receivedDataLength);
        }

        public static string ToText(byte[] arr) =>
            Encoding.ASCII.GetString(arr, 0, arr.Length);
        #endregion

        #region Get packet bytes
        public static byte[] GetBytes(NetworkStream ns)
        {           
            return Encoding.ASCII.GetBytes(ToText(ns));
        }
        #endregion

        #region Send packet
        public static void Send(NetworkStream ns, string msg, byte[] data)
        {
            _log.Message(msg);
            ns.Write(data, 0, data.Length);
        }

        public static void Send(NetworkStream ns, byte[] data) =>
            ns.Write(data, 0, data.Length);
        #endregion
                   
        private void PacketSetup(byte[] data)
        {
            if(data.Any(b => b != 0))
            {
                byte[] packetData = new byte[data.Length - 0x10];
                Buffer.BlockCopy(data, 0x10, packetData, 0, data.Length - 0x10);

                IsAuthenticated = data[0x00];
                IsEncoded = data[0x01];
                ConnType = (ushort)(data[0x03] << 8 | data[0x02]);
                Size = (ushort)(data[0x05] << 8 | data[0x04]);
                NumSubpackets = (ushort)(data[0x07] << 8 | data[0x06]);
                TimeStamp = (uint)(data[0x07] << 24 | data[0x07] << 16 | data[0x07] << 8 | data[0x06]);
                Data = packetData;
            }            
        }

        public void ProcessSubPackets(Blowfish bf)
        {
            //first subpacket start and end
            int index = 0x00;
            ushort subPacketSize = (ushort)(Data[0x1] << 8 | Data[0x0]);
            
            for(int i=0;i<this.NumSubpackets;i++)
            {               
                byte[] subpacketData = new byte[subPacketSize - 0x10];
                Buffer.BlockCopy(Data, index + 16, subpacketData, 0, subpacketData.Length); //copy whole subpacket. -16 = without subpacket header.            

                SubPacket subpacket = new SubPacket
                {
                    Size = subPacketSize,
                    Type = (ushort)(subpacketData[3] << 8 | subpacketData[2]),
                    SourceId = (ushort)(subpacketData[5] << 8 | subpacketData[4]),
                    TargetId = (ushort)(subpacketData[7] << 8 | subpacketData[6]),
                    Data = subpacketData
                };

                subpacket.Dencrypt(bf);
                SubPacketQueue.Enqueue(subpacket);
                index = subPacketSize;
                subPacketSize = (ushort)(Data[subPacketSize + 0x01] << 8 | Data[subPacketSize + 0x00]);
            }
        }

        public void Send(NetworkStream ns)
        {
            byte[] data = new byte[Size];

            using (MemoryStream ms = new MemoryStream(data))
            {
                using(BinaryReader br = new BinaryReader(ms))
                {

                }
            }

            ns.Write(data, 0, data.Length);


        }

       
    }

    public class SubPacket
    {        
        private static readonly Log _log = Log.Instance;

        #region Properties
        public ushort Size { get; set; } = 0;
        public ushort Type { get; set; }
        public uint SourceId { get; set; }
        public uint TargetId { get; set; }
        public uint Unknown { get; set; } = 0x00;    
        public byte[] Data { get; set; }
        public List<GamePacket> GamePacketList { get; set; } = new List<GamePacket>();
        #endregion

        #region Constructors
        public SubPacket(GamePacket gamePacket) => AddGamePacket(gamePacket);

        public SubPacket(List<GamePacket> gamePacketList)
        {
            GamePacketList = gamePacketList;
            ushort subPacketSize = 0;

            foreach (GamePacket gp in GamePacketList)
                subPacketSize += gp.Size;            

            Size = (ushort)subPacketSize;
        }

        public SubPacket() { }
        #endregion

        public void AddGamePacket(GamePacket gamePacket)
        {
            Size += (ushort)(0x10 + gamePacket.Size); //0x10 = subpacketheader
            GamePacketList.Add(gamePacket);
        }

        public byte[] ToBytes(ref Blowfish blowfish)
        {
            byte[] toBytes = new byte[Size];

            byte[] header = new byte[0x10];
            Buffer.BlockCopy(BitConverter.GetBytes(Size), 0, header, 0, 0x02);            
            header[0x02] = 0x03;
            header[0x04] = 0x68;
            header[0x05] = 0x68;
            header[0x07] = 0xe0;
            header[0x08] = 0x68;
            header[0x09] = 0x68;
            header[0x0b] = 0xe0;

            int index = 0x10;
            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);

            foreach(GamePacket gp in GamePacketList)
            {
                Buffer.BlockCopy(gp.ToBytes(ref blowfish), 0, toBytes, index, gp.Size);
                index += gp.Size;
            }           

            return toBytes;
        }

        public byte[] ToBytes()
        {
            byte[] toBytes = new byte[Size];

            byte[] header = new byte[0x10];
            Buffer.BlockCopy(BitConverter.GetBytes(Size), 0, header, 0, 0x02);
            header[0x02] = 0x03;
            header[0x04] = 0x68;
            header[0x05] = 0x68;
            header[0x07] = 0xe0;
            header[0x08] = 0x68;
            header[0x09] = 0x68;
            header[0x0b] = 0xe0;

            int index = 0x10;
            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);

            foreach (GamePacket gp in GamePacketList)
            {
                Buffer.BlockCopy(gp.ToBytes(), 0, toBytes, index, gp.Size);
                index += gp.Size;
            }

            return toBytes;
        }

        public int Opcode() => (Data[0x03]) >> 8 | (Data[0x02]);

        #region Encoding
        public void Encrypt(Blowfish bf)
        {
            try { bf.Encipher(Data, 0, Data.Length); }
            catch (Exception){_log.Error("Error encrypting subpacket!");}            
        }

        public void Dencrypt(Blowfish bf)
        {
            try { bf.Decipher(Data, 0, Data.Length); }
            catch (Exception){_log.Error( "Error decrypting subpacket!");}
        }
        #endregion
    }

    public class GamePacket
    {
        byte[] _data;
        public int Opcode { get; set; }
        public byte[] TimeStamp { get; set; }     
        public byte[] Data {
            get => _data;
            set {
                _data = value;
                Size = (ushort)(0x10 + _data.Length); //0x10 = header size
            }
        }
        public ushort Size { get; set; }

        public GamePacket(byte[] packet)
        {
            GamePacketSetup(packet);
        }

        public GamePacket() { }

        private void GamePacketSetup(byte[] packet)
        {
            this.Opcode = packet[2] << 8 | packet[3];
            this.TimeStamp = new byte[]{ packet[0x8],packet[0x9],packet[0xa],packet[0xb]};

            byte[] data = new byte[packet.Length - 16];
            Buffer.BlockCopy(packet, packet.Length + 16, data, 0, data.Length);

            this.Data = data;
        }

        public byte[] ToBytes(ref Blowfish blowfish)
        {
            byte[] toBytes = new byte[Data.Length + 0x10];

            byte[] header = new byte[0x10];
            header[0x00] = 0x14;
            header[0x02] = (byte)Opcode;
            Buffer.BlockCopy(Server.GetTimeStampHex(), 0, header, 0x08, 0x04);

            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);
            Buffer.BlockCopy(Data, 0, toBytes, 0x10, Data.Length);

            if(blowfish != null)
            {
                blowfish.Encipher(toBytes, 0, toBytes.Length);
            }

            return toBytes;
        }

        public byte[] ToBytes()
        {
            byte[] toBytes = new byte[Data.Length + 0x10];

            byte[] header = new byte[0x10];
            header[0x00] = 0x14;
            header[0x02] = (byte)Opcode;
            Buffer.BlockCopy(Server.GetTimeStampHex(), 0, header, 0x08, 0x04);

            Buffer.BlockCopy(header, 0, toBytes, 0, header.Length);
            Buffer.BlockCopy(Data, 0, toBytes, 0x10, Data.Length);           

            return toBytes;
        }
    }

    #region Code to review
    public class HTMLHeaderPacket
    {
        List<KeyValuePair<byte[],int>> headers = new List<KeyValuePair<byte[], int>>();                
        
        public void AddHeader(string str)
        {            
            headers.Add(
                new KeyValuePair<byte[],int>(Encoding.ASCII.GetBytes(str),str.Length)
            );
        }

        public byte[] ToByteStream()
        {
            int packetSize = 0;
            int index = 0;

            foreach(var h in this.headers)
            {
                //accumulate headers sizes 
                packetSize = packetSize + h.Value;
            }

            byte[] result = new byte[packetSize];

            foreach(var h in headers)
            {
                h.Key.CopyTo(result, index);
                index = index + h.Value;

                //int headerSize = h.Value;
                //byte[] tmp = new byte[headerSize + 2];
                //h.Key.CopyTo(tmp, 0);
                //new byte[] { 0x0d, 0x0a }.CopyTo(tmp, headerSize); //add trail                  
                //tmp.CopyTo(result, index + 2);
                //index += headerSize;
            }

            return result;
        }
    }

    /*
     * Type used to store a pair of values consisting of one byte array constant
     * for as a key which 
     */
    public class PacketPair
    {
        byte[] key = null;
        byte[] value = null;

        public byte[] Value() => this.value;
        public byte[] Key() => this.key;

        public PacketPair(string keyStr) => Key(keyStr);        
       
        public void Value(string str)
        {
            //get size of the string to store
            int strLength = str.Length;
            //new byte array to hold value+trail           
            byte[] NewByteArr = new byte[strLength + 2]; //we need 2 more bytes
            //convert string to byte arr and put it inside result arr
            ToByteArr(str).CopyTo(NewByteArr, 0);
            //add value trail (\r\n) to the end of the value 
            new byte[] { 0x0d, 0x0a }.CopyTo(NewByteArr, strLength);

            //Buffer.BlockCopy(Encoding.ASCII.GetBytes(str), 0, byteArr, 0, strLength);
            //Buffer.BlockCopy(new byte[] {0x0d,0x0a}, 0, byteArr, strLength, 2); //Add \r\n bytes at the end of str
            this.value = NewByteArr;
        }

        private byte[] ToByteArr(string str)
        {
            return Encoding.ASCII.GetBytes(str);
        }

        private void Key(string str)
        {
            this.key = Encoding.ASCII.GetBytes(str);
        }
    }
    #endregion
}
