using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Text;

namespace Launcher
{   
    public class Packet
    {
        #region Packet fields
        public int IsAuthenticated { get; private set; }
        public int IsEncoded { get; private set; }
        public int ConnType { get; private set; }
        public int Size { get; private set; }
        public int NumSubpackets { get; private set; }
        public Queue<SubPacket> Subpackets { get; set; }
        #endregion

        #region Static fields
        private static Log LogMsg { get; set; } = Log.Instance;
        private static byte[] HexKey { get; } = { 0xB4, 0xEE, 0x3F, 0x6C, 0x01, 0x6F, 0x5B, 0xD9, 0x71, 0x50, 0x0D, 0xB1, 0x85, 0xA2, 0xAB, 0x43 };
        private static BlowFishCS.BlowFish Blowfish { get; } = new BlowFishCS.BlowFish(HexKey);
        #endregion

        #region Constructors
        public Packet(NetworkStream ns)
        {
            byte[] packet = GetBytes(ns);

            Size = GetSizeBytes(packet);
        }
        #endregion

        #region Dummy packets
        public static byte[] GameUpdatePacket { get; } = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32,
            0x30, 0x34, 0x20, 0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x44,
            0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63,
            0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x33, 0x20, 0x47,
            0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
            0x68, 0x65, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20, 0x28, 0x55, 0x6e, 0x69, 0x78, 0x29,
            0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x73, 0x6c, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20,
            0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x2f, 0x30, 0x2e, 0x39, 0x2e, 0x37, 0x64, 0x20, 0x50,
            0x48, 0x50, 0x2f, 0x35, 0x2e, 0x32, 0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
            0x74, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69,
            0x76, 0x2f, 0x34, 0x38, 0x65, 0x63, 0x61, 0x36, 0x34, 0x37, 0x2f, 0x76, 0x65, 0x72, 0x63, 0x68,
            0x65, 0x63, 0x6b, 0x2e, 0x64, 0x61, 0x74, 0x0d, 0x0a, 0x58, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69, 0x76, 0x2f, 0x77, 0x69, 0x6e,
            0x33, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x0d,
            0x0a, 0x58, 0x2d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a,
            0x20, 0x5a, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x0d, 0x0a, 0x58, 0x2d, 0x50, 0x72, 0x6f, 0x74,
            0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x20, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x58,
            0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
            0x6d, 0x2f, 0x0d, 0x0a, 0x58, 0x2d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x56, 0x65, 0x72,
            0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2e, 0x30, 0x37, 0x2e, 0x31, 0x30,
            0x2e, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c,
            0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41,
            0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c,
            0x20, 0x6d, 0x61, 0x78, 0x3d, 0x39, 0x39, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
            0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d,
            0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74,
            0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a
        };
        public static byte[] BootUpdatePacket { get; } = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32,
            0x30, 0x34, 0x20, 0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x44,
            0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63,
            0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x32, 0x20, 0x47,
            0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
            0x68, 0x65, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20, 0x28, 0x55, 0x6e, 0x69, 0x78, 0x29,
            0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x73, 0x6c, 0x2f, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x31, 0x20,
            0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x2f, 0x30, 0x2e, 0x39, 0x2e, 0x37, 0x64, 0x20, 0x50,
            0x48, 0x50, 0x2f, 0x35, 0x2e, 0x32, 0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
            0x74, 0x2d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69,
            0x76, 0x2f, 0x32, 0x64, 0x32, 0x61, 0x33, 0x39, 0x30, 0x66, 0x2f, 0x76, 0x65, 0x72, 0x63, 0x68,
            0x65, 0x63, 0x6b, 0x2e, 0x64, 0x61, 0x74, 0x0d, 0x0a, 0x58, 0x2d, 0x52, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x20, 0x66, 0x66, 0x78, 0x69, 0x76, 0x2f, 0x77, 0x69, 0x6e,
            0x33, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x0d,
            0x0a, 0x58, 0x2d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a,
            0x20, 0x5a, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x0d, 0x0a, 0x58, 0x2d, 0x50, 0x72, 0x6f, 0x74,
            0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x20, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x58,
            0x2d, 0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
            0x6d, 0x2f, 0x0d, 0x0a, 0x58, 0x2d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x56, 0x65, 0x72,
            0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2e, 0x30, 0x37, 0x2e, 0x31, 0x30,
            0x2e, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c,
            0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41,
            0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c,
            0x20, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
            0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
            0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
            0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a
        };
        public static byte[] ErrorPage { get; set; } =
        {
            //HTTP 1.1 200 OK\r\n
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a,
            //Date: Mon, 31 Dec 2012 01:18:55 GMT\r\n
            0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x4d, 0x6f, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x35, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a,
            //Server: Apache\r\n
            0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x0d, 0x0a,
            //Last-Modified: Thu, 20 Dec 2012 11:08:21 GMT\r\n
            0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x20, 0x54, 0x68, 0x75, 0x2c, 0x20, 0x32, 0x30, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x31, 0x3a, 0x30, 0x38, 0x3a, 0x32, 0x31, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a,
            //ETag: "14ce19-da-bfb3f340"\r\n
            0x45, 0x54, 0x61, 0x67, 0x3a, 0x20, 0x22, 0x31, 0x34, 0x63, 0x65, 0x31, 0x39, 0x2d, 0x64, 0x61, 0x2d, 0x62, 0x66, 0x62, 0x33, 0x66, 0x33, 0x34, 0x30, 0x22, 0x0d, 0x0a,
            //Accept-Ranges: bytes\r\n
            0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x0d, 0x0a,
            //Content-Length: 218\r\n {tamanho do html}
            0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20,
            0x31, 0x34, 0x35,
            0x0d, 0x0a,
            //Keep-Alive: timeout=5, max=99\r\n
            0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3d, 0x39, 0x39, 0x0d, 0x0a,
            //Connection: Keep-Alive\r\n
            0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a,
            //Content-Type: text\r\n
            0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x0d, 0x0a,
            //\r\n
            0x0d, 0x0a,

            //HTML
            0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x74, 0x69, 0x74,
            0x6C, 0x65, 0x3E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65,
            0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x68,
            0x31, 0x3E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x3C, 0x2F, 0x68, 0x31, 0x3E, 0x3C, 0x68, 0x34,
            0x3E, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20,
            0x66, 0x6F, 0x75, 0x6E, 0x64, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x20, 0x72,
            0x65, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x20, 0x53, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x68,
            0x20, 0x41, 0x73, 0x74, 0x72, 0x61, 0x6C, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x3C,
            0x68, 0x34, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C,
            0x3E
        };

        public static byte[] AckPacket { get; } =
        {
            0x00, 0x00, 0x00, 0x00, 0xA0, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x90, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x69, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xED, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xED, 0xDF, 0xFF, 0xAF, 0xF7, 0xF7, 0xAF, 0x10, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x42, 0x82, 0x63, 0x52, 0x01, 0x00, 0x00, 0x00, 0x10, 0xEF, 0xDF, 0xFF, 0x53, 0x61, 0x6D, 0x70,
            0x6C, 0x65, 0x20, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x52, 0x75, 0x6E, 0x52, 0x75, 0x6E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0xF7, 0xAF, 0xAF, 0xF7, 0x00, 0x00, 0xB8, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2C, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x4F, 0x62,
            0x6A, 0x65, 0x63, 0x74, 0x2E, 0x2E, 0x2E, 0x5B, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39,
            0x39, 0x2E, 0x38, 0x32, 0x3A, 0x36, 0x33, 0x34, 0x30, 0x37, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x70, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x6C, 0x4E, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x32, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xAF, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xFE, 0x4E, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x0B, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x20, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x00, 0x01, 0xCC, 0xCC, 0x0C, 0x69, 0x00, 0xE0, 0xD0, 0x58, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x80, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0xC0, 0xEE, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xD0, 0xED, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xF0, 0xEE, 0xDF, 0xFF, 0xAF, 0xF7, 0xF7, 0xAF, 0x20, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF,
            0x0C, 0x69, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x34, 0x30, 0x37, 0x00, 0x00, 0x00, 0x00,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x18, 0xBE, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xD8, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0xF7, 0xAF, 0x42, 0x82, 0x63, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39, 0x39, 0x2E, 0x38, 0x32, 0x00, 0x00,
            0x00, 0x00, 0x36, 0x36, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x39, 0x39, 0x2E, 0x38, 0x32, 0x00, 0xFF,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x24, 0xCF, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7A, 0xB7, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x90, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xD1, 0xF3, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0xE8, 0x3E, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x70, 0x99, 0xAA, 0x01, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x58, 0x59, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x6C, 0x4D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0xE0, 0xEF, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x05, 0x3F, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x69, 0x00, 0xE0, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xF0, 0xDF, 0xFF, 0x7F, 0xFD, 0xFF, 0xFF, 0x23, 0x3F, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0x5A, 0x33, 0x02, 0x0C, 0x69, 0x00, 0xE0, 0xA0, 0x32, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00,
        };

        public static byte[] LoginAckPacket =
        {
            0x01, 0x00, 0x00, 0x00, 0x80, 0x02, 0x01, 0x00, 0x3F, 0xC7, 0x8A, 0xEE, 0x3B, 0x01, 0x00, 0x00,
            0x70, 0x02, 0x03, 0x00, 0x68, 0x68, 0x00, 0xE0, 0x68, 0x68, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00,
            0x14, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xE8, 0xE0, 0x50, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x99, 0x00, 0x00, 0x00, 0x00,
            0x42, 0x9A, 0x5F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x49, 0x4E, 0x41, 0x4C, 0x20, 0x46, 0x41,
            0x4E, 0x54, 0x41, 0x53, 0x59, 0x20, 0x58, 0x49, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };
       
        public static byte[] PackPage(string page)
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();  

            newVer.AddHeader("HTTP/1.1 200 OK\r\n");
            newVer.AddHeader("Date: Mon, 31 Dec 2012 01:18:55 GMT\r\n");
            newVer.AddHeader("Server: Apache\r\n");
            newVer.AddHeader("Last-Modified: Thu, 20 Dec 2012 11:08:21 GMT\r\n");
            newVer.AddHeader("ETag: \"14ce19-da-bfb3f340\"\r\n");
            newVer.AddHeader("Accept-Ranges: bytes\r\n");
            newVer.AddHeader("Content-Length: "+ page.Length + "\r\n");
            newVer.AddHeader("Content-Type: text\r\n");
            newVer.AddHeader("\r\n");
            newVer.AddHeader(page);

            return newVer.ToByteStream();
        }

        public static byte[] UpToDate()
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();
            newVer.AddHeader("HTTP/1.1 204 No Content\r\n");
            newVer.AddHeader("Content-Location: ffxiv/2d2a390f/vercheck.dat\r\n");
            newVer.AddHeader("X-Repository: ffxiv/win32/release/boot\r\n");
            newVer.AddHeader("X-Patch-Module: ZiPatch\r\n");
            newVer.AddHeader("X-Protocol: torrent\r\n");
            newVer.AddHeader("X-Info-Url: http://example.com\r\n");
            newVer.AddHeader("X-Latest-Version: 2010.09.18.0000\r\n");           
            newVer.AddHeader("\r\n");
            return newVer.ToByteStream();
        }

        public static byte[] BootVer()
        {
            HTMLHeaderPacket newVer = new HTMLHeaderPacket();
            newVer.AddHeader("HTTP/1.1 200 OK\r\n");
            newVer.AddHeader("Content-Location: ffxiv/48eca647/vercheck.dat\r\n");
            newVer.AddHeader("Content-Type: multipart/mixed; boundary=477D80B1_38BC_41d4_8B48_5273ADB89CAC\r\n");
            newVer.AddHeader("X-Repository: ffxiv/win32/release/boot\r\n");
            newVer.AddHeader("X-Patch-Module: ZiPatch\r\n");
            newVer.AddHeader("X-Protocol: torrent\r\n");
            newVer.AddHeader("X-Info-Url: http://example.com\r\n");
            newVer.AddHeader("X-Latest-Version: 2012.05.20.0000.0001\r\n");
            newVer.AddHeader("Connection: keep-alive\r\n");
            return newVer.ToByteStream();
        }
        #endregion

        #region Get packet text
        public static string ToText(NetworkStream ns)
        {
            //convert received 
            byte[] data = new byte[1024];
            int receivedDataLength = ns.Read(data, 0, data.Length);
            return Encoding.ASCII.GetString(data, 0, receivedDataLength);
        }

        public static string ToText(byte[] arr) =>
            Encoding.ASCII.GetString(arr, 0, arr.Length);
        #endregion

        #region Get packet bytes
        public static byte[] GetBytes(NetworkStream ns)
        {
            byte[] data = new byte[1024];
            int receivedDataLength = ns.Read(data, 0, data.Length);
            return data;
        }
        #endregion

        #region Send packet
        public static void Send(NetworkStream ns, string msg, byte[] data)
        {
            LogMsg.LogMessage(LogMsg.MSG, msg);
            ns.Write(data, 0, data.Length);
        }

        public static void Send(NetworkStream ns, byte[] data) =>
            ns.Write(data, 0, data.Length);
        #endregion


        public static byte GetOpcode(byte[] packet)
        {
            return 0x00;
        }

        public static int GetSizeBytes(byte[] packet) =>               
            packet[5] << 8 | packet[4];

        public static int GetNumSubpackets(byte[] packet) =>
            packet[7] << 8 | packet[6];

        private void GetSubpackets(byte[] packet)
        {
            int index = 0x10;
            int packetTotal = packet.Length - 16;

            while (packetTotal > 0)
            {
                SubPacket subpacket = new SubPacket();                
                int subPacketSize = packet[index + 1] << 8 | packet[index];

                //copy whole subpacket. -16 = without subpacket header.
                byte[] gamePacketData = new byte[subPacketSize - 16];
                Buffer.BlockCopy(packet, index+16, gamePacketData, 0, subPacketSize -16 );

                GamePacket gamepacket = new GamePacket(gamePacketData);

                subpacket.Size = subPacketSize;
                subpacket.GamePacket = gamepacket;                               

                gamepacket.Data = gamePacketData;
                subpacket.GamePacket = gamepacket;
                this.Subpackets.Enqueue(subpacket);
               
                index = index + subPacketSize;
                packetTotal = packetTotal - subPacketSize;
            }
        }

        public static byte[] Decrypt(NetworkStream ns)
        {            
            return Encoding.ASCII.GetBytes(Blowfish.Decrypt_CBC(ToText(ns)));
        }

        public static byte[] GetClientTimeStamp(string incoming)
        {
            byte[] result = {
                (byte)incoming[135],
                (byte)incoming[134],
                (byte)incoming[133],
                (byte)incoming[132]
            };

            return result;
        }
    }

    public struct SubPacket
    {
        public int Size { get; set; }
        public int Type { get; set; }
        public int TargetId { get; set; }
        public GamePacket GamePacket { get; set; }
    }

    public class GamePacket
    {       
        public int Opcode { get; set; }
        public int TimeStamp { get; set; }       
        public byte[] Data { get; set; }

        public GamePacket(byte[] packet)
        {
            GamePacketSetup(packet);
        }

        private void GamePacketSetup(byte[] packet)
        {

        }
    }

    #region Code to review
    public class HTMLHeaderPacket
    {
        List<KeyValuePair<byte[],int>> headers = new List<KeyValuePair<byte[], int>>();                
        
        public void AddHeader(string str)
        {            
            headers.Add(
                new KeyValuePair<byte[],int>(Encoding.ASCII.GetBytes(str),str.Length)
            );
        }

        public byte[] ToByteStream()
        {
            int packetSize = 0;
            int index = 0;

            foreach(var h in this.headers)
            {
                //accumulate headers sizes 
                packetSize = packetSize + h.Value;
            }

            byte[] result = new byte[packetSize];

            foreach(var h in headers)
            {
                h.Key.CopyTo(result, index);
                index = index + h.Value;

                //int headerSize = h.Value;
                //byte[] tmp = new byte[headerSize + 2];
                //h.Key.CopyTo(tmp, 0);
                //new byte[] { 0x0d, 0x0a }.CopyTo(tmp, headerSize); //add trail                  
                //tmp.CopyTo(result, index + 2);
                //index += headerSize;
            }

            return result;
        }
    }

    /*
     * Type used to store a pair of values consisting of one byte array constant
     * for as a key which 
     */
    public class PacketPair
    {
        byte[] key = null;
        byte[] value = null;

        public byte[] Value() => this.value;
        public byte[] Key() => this.key;

        public PacketPair(string keyStr) => Key(keyStr);        
       
        public void Value(string str)
        {
            //get size of the string to store
            int strLength = str.Length;
            //new byte array to hold value+trail           
            byte[] NewByteArr = new byte[strLength + 2]; //we need 2 more bytes
            //convert string to byte arr and put it inside result arr
            ToByteArr(str).CopyTo(NewByteArr, 0);
            //add value trail (\r\n) to the end of the value 
            new byte[] { 0x0d, 0x0a }.CopyTo(NewByteArr, strLength);

            //Buffer.BlockCopy(Encoding.ASCII.GetBytes(str), 0, byteArr, 0, strLength);
            //Buffer.BlockCopy(new byte[] {0x0d,0x0a}, 0, byteArr, strLength, 2); //Add \r\n bytes at the end of str
            this.value = NewByteArr;
        }

        private byte[] ToByteArr(string str)
        {
            return Encoding.ASCII.GetBytes(str);
        }

        private void Key(string str)
        {
            this.key = Encoding.ASCII.GetBytes(str);
        }
    }
    #endregion
}
